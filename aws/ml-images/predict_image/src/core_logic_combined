import boto3
import pandas as pd
import numpy as np
from sklearn.metrics import pairwise_distances
from io import BytesIO, StringIO
import json
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

s3 = boto3.client('s3')
BUCKET_NAME = 'sagemaker-studio-31b52b60' # Bucket for numpy files
BUCKET_RAW = 'photoscsv'

def load_csv_file():
    logging.info('Loading csv file')
    obj = s3.get_object(Bucket=BUCKET_RAW, Key='data/fashion.csv')
    csv_content = obj['Body'].read().decode('utf-8')
    data = StringIO(csv_content)
    df = pd.read_csv(data)
    return df

def load_npy_file(file_key):
    logging.info('Loading npy file')
    response = s3.get_object(Bucket=BUCKET_NAME, Key=file_key)
    npy_content = response['Body'].read()
    return np.load(BytesIO(npy_content))

# Initialise variables
logging.info('Initialising variables')
empty_arr = np.array([])
np.save('empty.npy', empty_arr)
loaded_array = np.load('empty.npy')

men_features = loaded_array
women_features = loaded_array
boys_features = loaded_array
girls_features = loaded_array

men_product_ids = loaded_array
women_product_ids = loaded_array
boys_product_ids = loaded_array
girls_product_ids = loaded_array

fashion_df = load_csv_file()
fashion_df["ProductId"] = fashion_df["ProductId"].astype(str)

def get_similar_products_cnn(product_id, num_results):
    logging.info('Getting similar products')
    if(fashion_df[fashion_df['ProductId']==product_id]['Gender'].values[0]=="Men"):
        features = men_features
        ids = men_product_ids
    elif(fashion_df[fashion_df['ProductId']==product_id]['Gender'].values[0]=="Women"):
        features = women_features
        ids = women_product_ids
    elif(fashion_df[fashion_df['ProductId']==product_id]['Gender'].values[0]=="Boys"):
        features = boys_features
        ids = boys_product_ids
    elif(fashion_df[fashion_df['ProductId']==product_id]['Gender'].values[0]=="Girls"):
        features = girls_features
        ids = girls_product_ids

    ids_list = ids.tolist()
    doc_id = ids_list.index(product_id)
    logging.info('Calculating pairwise distances')
    pairwise_dist = pairwise_distances(features, features[doc_id].reshape(1, -1))
    indices = np.argsort(pairwise_dist.flatten())[0:num_results]
    pdists = np.sort(pairwise_dist.flatten())[0:num_results]
    simiar_product_ids = [ids_list[i] for i in indices]
    
    return {'indices': indices, 'pdists': pdists, 'similar_product_ids': simiar_product_ids}


# Lambda handler function
def lambda_handler(event, context):
    try:
        logger.info('Entering lambda_handler')
        logger.info(f'Event: {event}')
        
        # Extract parameters from the incoming JSON payload
        product_id = int(event.get('product_id', 10634))  # Default to 10634 if not provided
        num_results = int(event.get('num_results', 5))    # Default to 5 if not provided
        
        logger.info(f'Getting similar products for Product ID: {product_id} with Num Results: {num_results}')
        summary = get_similar_products_cnn(product_id, num_results)
        similar_product_ids = summary['similar_product_ids']
        
        logger.info(f'Similar Product IDs: {similar_product_ids}')
        return {
            'statusCode': 200,
            'similar_products': similar_product_ids,
            'body': json.dumps('successfully predicted items!')
        }
    except Exception as e:
        logger.error(f'Error in lambda_handler: {e}', exc_info=True)
        return {
            'statusCode': 500,
            'body': json.dumps('An error occurred!')
        }